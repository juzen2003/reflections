What happens when you initialize a repository? Why do you need to do it?

  When I do git init, a metadata is there for storing the history of the repository, that's also the purpose of using git repository. We need to keep track of all files, so history of changes are important.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  staging area is like a temporarily storage area for files with modification before commit, it allows user to move back and forth to working directory before making the commit to repository.

How can you use the staging area to make sure you have one commit per logical
change?

  I can use git diff & git diff --staged to compared files between staging area & working directory and repository to make sure that files in staging area are only related to one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  Branches would be helpful if we would like to experiment some features without effecting any of the official working codes.

How do the diagrams help you visualize the branch structure?

  diagrams give us the info of branch structure in repository and we can understand at which commit branches are split.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  Merging would combine the changes of two branches together and updated the master tip to the merged commit. The merged commit can accessed previous commits from two branches, previous tip commits from those branches are the parents of merged commits.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

  git auto merging:
  pros: help us merge files when new lines are added at different places.
  cons: if same lines got changed from different branches, we need to manually check and fix the conflict of changes.
